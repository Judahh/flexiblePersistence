import { PersistenceAdapter } from '../../../persistenceAdapter/persistenceAdapter';
import { DatabaseInfo } from '../../databaseInfo';
import { Pool } from 'pg';
import { PersistencePromise } from '../../../persistenceAdapter/persistencePromise';
import { PersistenceInputCreate } from '../../../persistenceAdapter/persistenceInputCreate';
import { PersistenceInputUpdate } from '../../../persistenceAdapter/persistenceInputUpdate';
import { PersistenceInputRead } from '../../../persistenceAdapter/persistenceInputRead';
import { PersistenceInputDelete } from '../../../persistenceAdapter/persistenceInputDelete';
export declare class PostgresDB implements PersistenceAdapter {
    private databaseInfo;
    private pool;
    private static inspectSelectedItemValue;
    private static getDBVariable;
    private static getDBSetVariable;
    private static getDBSetVariables;
    private static getDBVariables;
    private static querySelectArray;
    private static querySelectItem;
    private static queryInsertItem;
    private static queryUpdate;
    private static queryUpdateArray;
    private static queryUpdateItem;
    private static queryDeleteItem;
    private static queryDeleteArray;
    private static resolveKeys;
    private static resolveValues;
    private static queryResults;
    constructor(databaseInfo: DatabaseInfo);
    create(input: PersistenceInputCreate): Promise<PersistencePromise>;
    update(input: PersistenceInputUpdate): Promise<PersistencePromise>;
    read(input: PersistenceInputRead): Promise<PersistencePromise>;
    delete(input: PersistenceInputDelete): Promise<PersistencePromise>;
    createItem(scheme: string, item: any): Promise<PersistencePromise>;
    createArray(scheme: string, items: Array<any>): Promise<PersistencePromise>;
    updateItem(scheme: string, selectedItem: any, item: any): Promise<PersistencePromise>;
    updateArray(scheme: string, selectedItem: any, item: any): Promise<PersistencePromise>;
    readArray(scheme: string, selectedItem: any): Promise<PersistencePromise>;
    readItem(scheme: string, selectedItem: any): Promise<PersistencePromise>;
    readItemById(scheme: string, id: any): Promise<PersistencePromise>;
    deleteItem(scheme: string, selectedItem: any): Promise<PersistencePromise>;
    deleteArray(scheme: string, selectedItem: any): Promise<PersistencePromise>;
    getDatabaseInfo(): DatabaseInfo;
    getPool(): Pool;
    close(): Promise<unknown>;
    private end;
    private query;
}
//# sourceMappingURL=postgresDB.d.ts.map